package com.example;


import com.example.domain.Recursion.NFactorial;
import com.example.domain.sort.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.annotation.PropertySources;
import org.springframework.core.env.Environment;

import java.time.LocalDateTime;

@SpringBootApplication
@PropertySources ( {
 @PropertySource ("classpath:application.properties") /* git.properties file will be generated by the plugin*/
})
@Slf4j
public class DataStructuresApplication {
	// Main driver method
	public static void main (String[] args) {

		ConfigurableApplicationContext applicationContext = SpringApplication.run(DataStructuresApplication.class, args);
		Environment environment = applicationContext.getEnvironment();

		String javaVersion = Runtime.version().toString();
		String time = LocalDateTime.now().toString();
		System.out.println("********\nBuild Time: " + time
		 + "\nJava Version: " + javaVersion + "\n********");


//		ArrayInput arrayInput = new ArrayInput();
//		int a[] = arrayInput.takeArrayInput();

//		BubbleSort bubbleSort = new BubbleSort();
//		bubbleSort.bubbleSort(a);

//		InsertionSort insertionSort = new InsertionSort();
//		insertionSort.insertionSort(a);

//		SelectionSort selectionSort = new SelectionSort();
//		selectionSort.selectionSort(a);
//		selectionSort.printArray(a);

//		QuickSort quickSort = new QuickSort();
//		quickSort.quickSort(a,0,a.length-1);

//		Heap heap = new Heap();
//		 int [] b = heap.heapArray(a,a.length);
//	   heap.heapSort(b,b.length); //was unable to implement
//		 int a[] = {432, 8, 530, 90, 88, 231, 11, 45, 677, 199};
//		int a[] = {151, 259, 360, 91, 115, 706, 34, 858, 2};
//		RadixSort radixSort = new RadixSort();
//		  radixSort.radixSort(a,a.length);
//		CountingSort countingSort = new CountingSort();
//		 countingSort.countSort(a,a.length,9);

//		NFactorial nFactorial = new NFactorial();
//		 int n = nFactorial.factorial(4);
//		 log.debug("the n! is {}",n);






	}


}
